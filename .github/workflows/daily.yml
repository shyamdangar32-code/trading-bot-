name: Daily NIFTY Signals

on:
  schedule:
    # Every 30 min, Mon‚ÄìFri, 08:30‚Äì15:30 IST  (UTC 03:00‚Äì10:59)
    - cron: "*/30 3-10 * * 1-5"
  workflow_dispatch:

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install yfinance ta requests pandas numpy

      - name: Run bot
        env:
          # Support either secret naming scheme
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID:   ${{ secrets.TELEGRAM_CHAT_ID }}
          TG_BOT_TOKEN:       ${{ secrets.TG_BOT_TOKEN }}
          TG_CHAT_ID:         ${{ secrets.TG_CHAT_ID }}
        run: |
          python - <<'PY'
          import os, sys, pandas as pd, numpy as np, requests, yfinance as yf
          from ta.momentum import RSIIndicator

          # Use whichever secret names are present
          BOT  = os.getenv("TELEGRAM_BOT_TOKEN") or os.getenv("TG_BOT_TOKEN") or ""
          CHAT = os.getenv("TELEGRAM_CHAT_ID")   or os.getenv("TG_CHAT_ID")   or ""

          # --- DEBUG: show whether creds are present (but not the values)
          print("DEBUG | BOT token present? ", bool(BOT))
          print("DEBUG | CHAT ID present?   ", bool(CHAT))

          def send(msg: str):
              print("SEND ->", msg.replace("\n", " | "))
              if not BOT or not CHAT:
                  print("‚ö†Ô∏è No Telegram creds; skipping send.")
                  return
              try:
                  r = requests.post(
                      f"https://api.telegram.org/bot{BOT}/sendMessage",
                      json={"chat_id": CHAT, "text": msg},
                      timeout=20,
                  )
                  print("Telegram status:", r.status_code, r.text[:200])
              except Exception as e:
                  print("Telegram error:", e)

          # --- download last 6 months daily data
          df = yf.download("^NSEI", period="6mo", interval="1d",
                           auto_adjust=True, progress=False)

          if df is None or len(df) == 0:
            send("‚ùå No data from Yahoo for ^NSEI.")
            sys.exit(0)

          # Normalize columns
          if isinstance(df.columns, pd.MultiIndex):
              try:
                  df.columns = [lvl[1] if lvl[1] else lvl[0] for lvl in df.columns]
              except Exception:
                  df.columns = [str(c[-1] if isinstance(c, tuple) else c) for c in df.columns]

          if "Close" not in df.columns:
              send(f"‚ùå 'Close' column missing. Columns: {list(df.columns)}")
              sys.exit(0)

          df = df.rename_axis("Date").reset_index()
          df["Close"] = pd.to_numeric(df["Close"], errors="coerce")
          df = df.dropna(subset=["Close"]).reset_index(drop=True)

          # Indicators
          df["EMA20"] = df["Close"].ewm(span=20, adjust=False).mean()
          df["RSI"]   = RSIIndicator(close=df["Close"], window=14).rsi()

          # Signals
          df["Signal"] = None
          for i in range(1, len(df)):
              rsi = df.at[i, "RSI"]
              c, p  = df.at[i, "Close"], df.at[i-1, "Close"]
              e, ep = df.at[i, "EMA20"], df.at[i-1, "EMA20"]
              if pd.notna(rsi) and pd.notna(c) and pd.notna(p) and pd.notna(e) and pd.notna(ep):
                  crossed_up   = (p < ep) and (c > e)
                  crossed_down = (p > ep) and (c < e)
                  if 30 <= rsi <= 50 and crossed_up:
                      df.at[i, "Signal"] = "BUY"
                  elif rsi > 70 and crossed_down:
                      df.at[i, "Signal"] = "SELL"

          s = df.dropna(subset=["Signal"])
          if s.empty:
              send("üìù No new NIFTY signal this run.")
              sys.exit(0)

          last = s.iloc[-1]
          msg = (
              f"üö® NIFTY Signal: {last['Signal']}\n"
              f"Date: {pd.to_datetime(last['Date']).date()}\n"
              f"Close: {last['Close']:.2f}\n"
              f"EMA20: {last['EMA20']:.2f}\n"
              f"RSI: {last['RSI']:.2f}"
          )
          send(msg)
          PY

      # Always send a meta alert so you know if the workflow itself passed/failed
      - name: Telegram alert (workflow status)
        if: ${{ always() }}
        env:
          BOT1:  ${{ secrets.TELEGRAM_BOT_TOKEN }}
          BOT2:  ${{ secrets.TG_BOT_TOKEN }}
          CHAT1: ${{ secrets.TELEGRAM_CHAT_ID }}
          CHAT2: ${{ secrets.TG_CHAT_ID }}
          STATUS: ${{ job.status }}
          RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        run: |
          BOT="${BOT1:-$BOT2}"
          CHAT="${CHAT1:-$CHAT2}"
          if [ -z "$BOT" ] || [ -z "$CHAT" ]; then
            echo "No Telegram secrets set; skipping meta alert."
            exit 0
          fi
          MSG="Daily NIFTY Signals workflow: ${STATUS}%0A${RUN_URL}"
          curl -s "https://api.telegram.org/bot${BOT}/sendMessage" \
            -d "chat_id=${CHAT}" \
            -d "text=${MSG}"
