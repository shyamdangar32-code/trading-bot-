name: Daily NIFTY Signals

on:
  # schedule:
  #   # Every 30 min, Mon–Fri, 09:00–15:30 IST (UTC 03:30–10:00 approx)
  #   - cron: "*/30 3-10 * * 1-5"
  workflow_dispatch:

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install yfinance ta requests pandas numpy

      - name: Run bot
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          python - <<'PY'
          import os, requests, pandas as pd, numpy as np, yfinance as yf
          from ta.momentum import RSIIndicator

          BOT  = os.getenv("TELEGRAM_BOT_TOKEN", "")
          CHAT = os.getenv("TELEGRAM_CHAT_ID", "")

          def send(msg: str):
              if not BOT or not CHAT:
                  print("⚠️ No Telegram creds; skipping send.")
                  return
              try:
                  r = requests.post(
                      f"https://api.telegram.org/bot{BOT}/sendMessage",
                      json={"chat_id": CHAT, "text": msg},
                      timeout=20,
                  )
                  print("Telegram status:", r.status_code)
              except Exception as e:
                  print("Telegram error:", e)

          # 1) Download data
          df = yf.download("^NSEI", period="6mo", interval="1d",
                           auto_adjust=True, progress=False)
          if df is None or df.empty:
              print("❌ No data from Yahoo Finance.")
              raise SystemExit(0)

          # Make tabular with Date column and ensure Close exists
          df = df.copy().reset_index()
          if "Close" not in df.columns:
              print(f"❌ Expected 'Close' in columns, got: {list(df.columns)}")
              raise SystemExit(1)

          # Clean numeric close
          df["Close"] = pd.to_numeric(df["Close"], errors="coerce")
          df = df.dropna(subset=["Close"]).reset_index(drop=True)

          # 2) Indicators
          df["EMA20"] = df["Close"].ewm(span=20, adjust=False).mean()
          df["RSI"]   = RSIIndicator(close=df["Close"], window=14).rsi()

          # 3) Signals
          df["Signal"] = None
          for i in range(1, len(df)):
              rsi = df.at[i, "RSI"]
              c, p = df.at[i, "Close"], df.at[i-1, "Close"]
              e, ep = df.at[i, "EMA20"], df.at[i-1, "EMA20"]

              if pd.notna(rsi) and pd.notna(c) and pd.notna(p) and pd.notna(e) and pd.notna(ep):
                  crossed_up   = (p < ep) and (c > e)
                  crossed_down = (p > ep) and (c < e)

                  if 30 <= rsi <= 50 and crossed_up:
                      df.at[i, "Signal"] = "BUY"
                  elif rsi > 70 and crossed_down:
                      df.at[i, "Signal"] = "SELL"

          s = df.dropna(subset=["Signal"])
          if s.empty:
              msg = "📉 No new NIFTY signal today."
              print(msg); send(msg); raise SystemExit(0)

          last = s.iloc[-1]
          msg = (
              f"🚨 NIFTY Signal: {last['Signal']}\n"
              f"Date: {pd.to_datetime(last['Date']).date()}\n"
              f"Close: {last['Close']:.2f}\n"
              f"EMA20: {last['EMA20']:.2f}\n"
              f"RSI: {last['RSI']:.2f}"
          )
          print(msg); send(msg)
          PY
