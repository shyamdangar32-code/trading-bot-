name: Daily NIFTY Signals

on:
  # Run manually from the Actions tab
  workflow_dispatch:
  # (Optional) uncomment to auto-run during market hours (Mon‚ÄìFri)
  # schedule:
  #   - cron: "*/30 3-10 * * 1-5"   # every 30 min, 08:30‚Äì15:30 IST (UTC 03:00‚Äì10:59)

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install yfinance ta requests pandas numpy

      - name: Run bot
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          python - <<'PY'
          import os, requests, pandas as pd, numpy as np, yfinance as yf
          from ta.momentum import RSIIndicator

          BOT  = os.getenv("TELEGRAM_BOT_TOKEN", "")
          CHAT = os.getenv("TELEGRAM_CHAT_ID", "")

          def send(msg: str):
            # Log to console
            print("\n--- Telegram message ---\n" + msg + "\n------------------------\n")
            # Try Telegram if creds exist
            if not BOT or not CHAT:
              print("‚ö†Ô∏è  No Telegram creds; skipping send.")
              return
            try:
              r = requests.post(
                f"https://api.telegram.org/bot{BOT}/sendMessage",
                json={"chat_id": CHAT, "text": msg},
                timeout=20,
              )
              print("Telegram status:", r.status_code, r.text[:200])
            except Exception as e:
              print("Telegram error:", e)

          # ---------- 1) Data (robust) ----------
          df = yf.download("^NSEI", period="6mo", interval="1d", auto_adjust=False, progress=False)

          if df is None or len(df) == 0:
            send("‚ùå No data from Yahoo for ^NSEI.")
            raise SystemExit(0)

          # Normalize column names and locate a close-like column
          df.columns = [str(c).strip().replace(" ", "").title()]  # "Adj Close" -> "Adjclose"
          close_col = None
          for cand in ["Close", "Adjclose", "AdjClose"]:
            if cand in df.columns:
              close_col = cand
              break

          if close_col is None:
            send(f"‚ùå Can't find a close column. Columns: {list(df.columns)}")
            raise SystemExit(0)

          df = df.rename_axis("Date").reset_index()
          df["Close"] = pd.to_numeric(df[close_col], errors="coerce")
          df = df.dropna(subset=["Close"]).reset_index(drop=True)

          if df.empty:
            send("‚ùå Dataframe empty after cleaning.")
            raise SystemExit(0)

          # ---------- 2) Indicators ----------
          df["EMA20"] = df["Close"].ewm(span=20, adjust=False).mean()
          df["RSI"]   = RSIIndicator(close=df["Close"], window=14).rsi()

          # ---------- 3) Signals ----------
          # BUY  when 30 <= RSI <= 50 AND close crosses above EMA20
          # SELL when RSI > 70           AND close crosses below EMA20
          df["Signal"] = None
          for i in range(1, len(df)):
            rsi = df.at[i, "RSI"]
            c, p  = df.at[i, "Close"], df.at[i-1, "Close"]
            e, ep = df.at[i, "EMA20"], df.at[i-1, "EMA20"]
            if pd.notna(rsi) and pd.notna(c) and pd.notna(p) and pd.notna(e) and pd.notna(ep):
              crossed_up   = (p < ep) and (c > e)
              crossed_down = (p > ep) and (c < e)
              if 30 <= rsi <= 50 and crossed_up:
                df.at[i, "Signal"] = "BUY"
              elif rsi > 70 and crossed_down:
                df.at[i, "Signal"] = "SELL"

          s = df.dropna(subset=["Signal"]).copy()

          # ---------- 4) Notify ----------
          if s.empty:
            send("üìù No new NIFTY signal this run.")
            print("No signal.")
            raise SystemExit(0)

          last = s.iloc[-1]
          msg = (
            f"üìà NIFTY Signal: {last['Signal']}\n"
            f"Date: {pd.to_datetime(last['Date']).date()}\n"
            f"Close: {last['Close']:.2f}\n"
            f"EMA20: {last['EMA20']:.2f}\n"
            f"RSI: {last['RSI']:.2f}"
          )
          send(msg)
          print("‚úÖ Done.")
          PY
