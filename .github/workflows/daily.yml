import os, sys, time, json, requests
import pandas as pd
import numpy as np
import yfinance as yf
from ta.momentum import RSIIndicator

# ------------- Secrets (read from GitHub Actions or your .env) -------------
TG_BOT = os.getenv("TELEGRAM_BOT_TOKEN", "")
TG_CHAT = os.getenv("TELEGRAM_CHAT_ID", "")
Z_API_KEY = os.getenv("ZERODHA_API_KEY", "")
Z_API_SECRET = os.getenv("ZERODHA_API_SECRET", "")
# NOTE: Trading requires an ACCESS TOKEN you regenerate after login.
Z_ACCESS_TOKEN = os.getenv("ZERODHA_ACCESS_TOKEN", "")  # optional

# ------------- Helpers ------------------------------------------------------
def tgsend(text: str):
    """Send a Telegram message (no-op if creds missing)."""
    print(text)
    if not TG_BOT or not TG_CHAT:
        print("‚ö†Ô∏è Telegram creds not set; skipping send.")
        return
    try:
        r = requests.post(
            f"https://api.telegram.org/bot{TG_BOT}/sendMessage",
            json={"chat_id": TG_CHAT, "text": text},
            timeout=20,
        )
        print("Telegram status:", r.status_code, r.text[:200])
    except Exception as e:
        print("Telegram error:", e)

def fetch_nifty(period="6mo", interval="1d") -> pd.DataFrame:
    """Download NIFTY data from Yahoo."""
    df = yf.download("^NSEI", period=period, interval=interval,
                     auto_adjust=True, progress=False)
    if df is None or len(df) == 0:
        raise RuntimeError("No data from Yahoo for ^NSEI.")
    # If MultiIndex columns, flatten
    if isinstance(df.columns, pd.MultiIndex):
        df.columns = [c[-1] if isinstance(c, tuple) else str(c) for c in df.columns]
    if "Close" not in df.columns:
        raise RuntimeError(f"'Close' column missing. Columns: {list(df.columns)}")
    df = df.rename_axis("Date").reset_index().copy()
    df["Close"] = pd.to_numeric(df["Close"], errors="coerce")
    df = df.dropna(subset=["Close"]).reset_index(drop=True)
    return df

def analyze(df: pd.DataFrame) -> dict:
    """EMA20 + RSI(14) crossover rule ‚Üí BUY/SELL/HOLD."""
    df["EMA20"] = df["Close"].ewm(span=20, adjust=False).mean()
    df["RSI"]   = RSIIndicator(close=df["Close"], window=14).rsi()

    sig = "HOLD"
    if len(df) >= 2:
        c, p  = df.iloc[-1]["Close"], df.iloc[-2]["Close"]
        e, ep = df.iloc[-1]["EMA20"], df.iloc[-2]["EMA20"]
        rsi   = float(df.iloc[-1]["RSI"])
        crossed_up   = (p < ep) and (c > e)
        crossed_down = (p > ep) and (c < e)
        if 30 <= rsi <= 50 and crossed_up:
            sig = "BUY"
        elif rsi > 70 and crossed_down:
            sig = "SELL"

    out = {
        "date": str(df.iloc[-1]["Date"])[:10],
        "close": float(df.iloc[-1]["Close"]),
        "ema20": float(df.iloc[-1]["EMA20"]),
        "rsi": float(df.iloc[-1]["RSI"]),
        "signal": sig,
    }
    return out

# ------------- Optional Zerodha check (NO trading here) ---------------------
def zerodha_ping() -> str:
    """
    Try a lightweight call that needs a valid ACCESS TOKEN.
    If missing, return an instruction string.
    """
    if not (Z_API_KEY and Z_API_SECRET):
        return "‚ö†Ô∏è Zerodha API key/secret not set."
    if not Z_ACCESS_TOKEN:
        return (
            "‚ÑπÔ∏è Zerodha connected (keys set) but no ACCESS TOKEN yet.\n"
            "Open Kite ‚Üí generate request_token ‚Üí create session ‚Üí set "
            "`ZERODHA_ACCESS_TOKEN` secret. We‚Äôll keep trading disabled until then."
        )
    # test profile endpoint
    try:
        headers = {
            "X-Kite-Version": "3",
            "Authorization": f"token {Z_API_KEY}:{Z_ACCESS_TOKEN}",
        }
        r = requests.get("https://api.kite.trade/user/profile", headers=headers, timeout=10)
        if r.status_code == 200:
            return "‚úÖ Zerodha access token is valid (profile reachable)."
        return f"‚ö†Ô∏è Zerodha check failed: {r.status_code} {r.text[:120]}"
    except Exception as e:
        return f"‚ö†Ô∏è Zerodha check error: {e}"

# ------------- Main ---------------------------------------------------------
def run_once():
    try:
        df = fetch_nifty("6mo", "1d")
        res = analyze(df)
        msg = (
            f"üìà NIFTY update {res['date']}\n"
            f"Close: {res['close']:.2f}\n"
            f"EMA20: {res['ema20']:.2f}\n"
            f"RSI(14): {res['rsi']:.2f}\n"
            f"Signal: {res['signal']}"
        )
        tgsend(msg)

        # Zerodha connection (informational only)
        zmsg = zerodha_ping()
        print(zmsg)
        if "‚úÖ" in zmsg or "‚ö†Ô∏è" in zmsg:
            tgsend(zmsg)

    except Exception as e:
        tgsend(f"‚ùå Bot error: {e}")
        raise

if __name__ == "__main__":
    run_once()
